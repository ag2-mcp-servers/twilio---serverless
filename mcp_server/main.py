# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:11:53+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    ServerlessV1Service,
    ServerlessV1ServiceAsset,
    ServerlessV1ServiceAssetAssetVersion,
    ServerlessV1ServiceBuild,
    ServerlessV1ServiceBuildBuildStatus,
    ServerlessV1ServiceEnvironment,
    ServerlessV1ServiceEnvironmentDeployment,
    ServerlessV1ServiceEnvironmentLog,
    ServerlessV1ServiceEnvironmentVariable,
    ServerlessV1ServiceFunction,
    ServerlessV1ServiceFunctionFunctionVersion,
    ServerlessV1ServiceFunctionFunctionVersionFunctionVersionContent,
    V1ServicesGetResponse,
    V1ServicesServiceSidAssetsAssetSidVersionsGetResponse,
    V1ServicesServiceSidAssetsGetResponse,
    V1ServicesServiceSidBuildsGetResponse,
    V1ServicesServiceSidEnvironmentsEnvironmentSidDeploymentsGetResponse,
    V1ServicesServiceSidEnvironmentsEnvironmentSidLogsGetResponse,
    V1ServicesServiceSidEnvironmentsEnvironmentSidVariablesGetResponse,
    V1ServicesServiceSidEnvironmentsGetResponse,
    V1ServicesServiceSidFunctionsFunctionSidVersionsGetResponse,
    V1ServicesServiceSidFunctionsGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Serverless',
    version='1.42.0',
    servers=[{'url': 'https://serverless.twilio.com'}],
)


@app.get(
    '/v1/Services',
    description=""" Retrieve a list of all Services. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_service(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services',
    description=""" Create a new Service resource. """,
    tags=['service_management', 'deployment_control', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_service(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Assets',
    description=""" Retrieve a list of all Assets. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_asset(
    service_sid: str = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Assets',
    description=""" Create a new Asset resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_asset(
    service_sid: str = Path(..., alias='ServiceSid'), request: Request = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions',
    description=""" Retrieve a list of all Asset Versions. """,
    tags=['service_management', 'asset_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_asset_version(
    service_sid: str = Path(..., alias='ServiceSid'),
    asset_sid: constr(
        pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='AssetSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions/{Sid}',
    description=""" Retrieve a specific Asset Version. """,
    tags=['service_management', 'asset_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_asset_version(
    service_sid: str = Path(..., alias='ServiceSid'),
    asset_sid: constr(
        pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='AssetSid'),
    sid: constr(pattern=r'^ZN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Assets/{Sid}',
    description=""" Delete an Asset resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_asset(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Assets/{Sid}',
    description=""" Retrieve a specific Asset resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_asset(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Assets/{Sid}',
    description=""" Update a specific Asset resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_asset(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Builds',
    description=""" Retrieve a list of all Builds. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_build(
    service_sid: str = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Builds',
    description=""" Create a new Build resource. At least one function version or asset version is required. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_build(
    service_sid: str = Path(..., alias='ServiceSid'), request: Request = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Builds/{Sid}',
    description=""" Delete a Build resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_build(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZB[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Builds/{Sid}',
    description=""" Retrieve a specific Build resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_build(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZB[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Builds/{Sid}/Status',
    description=""" Retrieve a specific Build resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_build_status(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZB[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments',
    description=""" Retrieve a list of all environments. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_environment(
    service_sid: str = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Environments',
    description=""" Create a new environment. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_environment(
    service_sid: str = Path(..., alias='ServiceSid'), request: Request = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments',
    description=""" Retrieve a list of all Deployments. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_deployment(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments',
    description=""" Create a new Deployment. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_deployment(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Deployments/{Sid}',
    description=""" Retrieve a specific Deployment. """,
    tags=['environment_control', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_deployment(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    sid: constr(pattern=r'^ZD[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs',
    description=""" Retrieve a list of all logs. """,
    tags=['service_management', 'environment_control', 'function_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_log(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    function_sid: Optional[
        constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Query(None, alias='FunctionSid'),
    start_date: Optional[datetime] = Query(None, alias='StartDate'),
    end_date: Optional[datetime] = Query(None, alias='EndDate'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs/{Sid}',
    description=""" Retrieve a specific log. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_log(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    sid: constr(pattern=r'^NO[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables',
    description=""" Retrieve a list of all Variables. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_variable(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables',
    description=""" Create a new Variable. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_variable(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}',
    description=""" Delete a specific Variable. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_variable(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    sid: constr(pattern=r'^ZV[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}',
    description=""" Retrieve a specific Variable. """,
    tags=['service_management', 'environment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_variable(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    sid: constr(pattern=r'^ZV[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Variables/{Sid}',
    description=""" Update a specific Variable. """,
    tags=['service_management', 'environment_control', 'deployment_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_variable(
    service_sid: str = Path(..., alias='ServiceSid'),
    environment_sid: constr(
        pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='EnvironmentSid'),
    sid: constr(pattern=r'^ZV[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Environments/{Sid}',
    description=""" Delete a specific environment. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_environment(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Environments/{Sid}',
    description=""" Retrieve a specific environment. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_environment(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZE[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Functions',
    description=""" Retrieve a list of all Functions. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_function(
    service_sid: str = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Functions',
    description=""" Create a new Function resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_function(
    service_sid: str = Path(..., alias='ServiceSid'), request: Request = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions',
    description=""" Retrieve a list of all Function Version resources. """,
    tags=['function_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_function_version(
    service_sid: str = Path(..., alias='ServiceSid'),
    function_sid: constr(
        pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FunctionSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}',
    description=""" Retrieve a specific Function Version resource. """,
    tags=['service_management', 'function_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_function_version(
    service_sid: str = Path(..., alias='ServiceSid'),
    function_sid: constr(
        pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FunctionSid'),
    sid: constr(pattern=r'^ZN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}/Content',
    description=""" Retrieve a the content of a specific Function Version resource. """,
    tags=['function_operations', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_function_version_content(
    service_sid: str = Path(..., alias='ServiceSid'),
    function_sid: constr(
        pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FunctionSid'),
    sid: constr(pattern=r'^ZN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Functions/{Sid}',
    description=""" Delete a Function resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_function(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Functions/{Sid}',
    description=""" Retrieve a specific Function resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_function(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Functions/{Sid}',
    description=""" Update a specific Function resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_function(
    service_sid: str = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^ZH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{Sid}',
    description=""" Delete a Service resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_service(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{Sid}',
    description=""" Retrieve a specific Service resource. """,
    tags=['function_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_service(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{Sid}',
    description=""" Update a specific Service resource. """,
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service(sid: str = Path(..., alias='Sid'), request: Request = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
